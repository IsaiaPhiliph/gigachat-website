// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  canUseChat    Boolean   @default(false)
  conversations Conversation[]
  messages ChatMessage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation{
  id  String  @id @default(cuid())
  name  String @default(uuid())
  messages ChatMessage[]
  user User @relation(fields:[userId],references: [id])
  userId String
}

model ChatMessage{
  id  String  @id @default(cuid())
  role Role
  content String
  conversation Conversation @relation(fields:[conversationId],references: [id])
  conversationId String
  user User @relation(fields:[userId],references: [id])
  userId String
}

enum Role {
  user
  assistant
}